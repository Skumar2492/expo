{"version":3,"file":"fast-refresh.js","sourceRoot":"","sources":["../src/fast-refresh.ts"],"names":[],"mappings":";;AAGA;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;IAC1C;IACE,gCAAgC;IAChC,OAAO,uBAAuB,KAAK,WAAW;QAC9C,4CAA4C;QAC5C,MAAM,CAAC,uBAAuB,GAAG,gBAAgB,CAAC,EAClD;QACA,sGAAsG;QACtG,MAAM,OAAO,GAAG,MAAM,CAAC,uBAAuB,GAAG,gBAAgB,CAAC,CAAC;QACnE,mCAAmC;QACnC,MAAM,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAC;QAC5D,0CAA0C;QAC1C,MAAM,iBAAiB,GAAG,IAAI,OAAO,EAAE,CAAC;QAExC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;YACrB;;;;eAIG;YACH,qBAAqB,CAAC,KAAK;gBACzB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,mBAAmB,IAAI,KAAK,EAAE;oBAC7D,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;iBAChD;gBAED,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,eAAe,IAAI,KAAK,EAAE;oBACzD,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;iBAC5C;gBAED,0FAA0F;gBAC1F,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,cAAc,EAAE;oBACpF,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAClC;gBAED,OAAO,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,qBAAqB,CAAC,KAAK,CAAC,CAAC;YACtE,CAAC;SACF,CAAC,CAAC;KACJ;CACF","sourcesContent":["declare global {\n  var __METRO_GLOBAL_PREFIX__: string | undefined;\n}\n/**\n * This is a hack for Expo Router to support Fast Refresh on _layout files\n *\n * Fast Refresh only works when:\n *  - Files only export React Components\n *  - All inverse dependencies only export React Components\n *\n * Expo Router's _layout files support exporting both 'unstable_settings' and 'ErrorBoundary'\n *\n * 'unstable_settings':\n *  - This is a plain object, so it will break Fast Refresh\n *\n * 'ErrorBoundary'\n *  - While this is a React component, it is imported from 'expo-router'\n *  - 'expo-router' has an inverse dependency on _ctx, which is a require.context object\n *\n *\n * To resolve this issue, we extend ReactRefresh to flag these exports as React components\n *\n * @see https://reactnative.dev/docs/fast-refresh\n */\nif (process.env.NODE_ENV === 'development') {\n  if (\n    // Should be a string at runtime\n    typeof __METRO_GLOBAL_PREFIX__ !== 'undefined' &&\n    // Should be set by Metro's require polyfill\n    global[__METRO_GLOBAL_PREFIX__ + '__ReactRefresh']\n  ) {\n    // source: https://github.com/facebook/metro/blob/main/packages/metro-runtime/src/polyfills/require.js\n    const Refresh = global[__METRO_GLOBAL_PREFIX__ + '__ReactRefresh'];\n    // Keep a reference to the original\n    const isLikelyComponentType = Refresh.isLikelyComponentType;\n    // Modules can be dereferenced at any time\n    const expoRouterExports = new WeakSet();\n\n    Object.assign(Refresh, {\n      /*\n       * isLikelyComponentType is called twice.\n       *   1. Initially with a modules export object\n       *   2. With each individual export of a module\n       */\n      isLikelyComponentType(value) {\n        if (typeof value === 'object' && 'unstable_settings' in value) {\n          expoRouterExports.add(value.unstable_settings);\n        }\n\n        if (typeof value === 'object' && 'ErrorBoundary' in value) {\n          expoRouterExports.add(value.ErrorBoundary);\n        }\n\n        // When ErrorBoundary is exported, the inverse dependency will also include the _ctx file.\n        if (typeof value === 'object' && 'ctx' in value && value.ctx.name === 'metroContext') {\n          expoRouterExports.add(value.ctx);\n        }\n\n        return expoRouterExports.has(value) || isLikelyComponentType(value);\n      },\n    });\n  }\n}\n\n// Export an empty object so TypeScript doesn't consider this an ambient module\nexport {};\n"]}